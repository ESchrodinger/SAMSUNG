[李政江 / Zhengjiang Li] 2022/9/7 17:50
我厂在mp_event_psi这个函数中主要改进的是kill reason，针对于不同的情况添加了不同的kill reason和对应策略。

观察代码最大的不同在于我厂引入了一个新的变量，use_emergency_kill，这个变量常用于相机启动和8k视频启动。并且我厂还针对cachemem做了优化，这是原厂没有的，当相机启动时间，主要是当临时文件数量低于zone中cachemem的deadline时，会将use_emergency_kill置为true，开启紧急情况。
Normal_wmarks小于wmarks_minX2且小于low时会use_emergency_kill置为true。在很多时候都使用wmarks_minX2代替wmarks_min，尽量避免直接回收。

触发了use_emergency_kill之后reclaim模式就会变为EMERGENCY_MEM;当然这个的优先级是比直接回收低的。

Kill reason 增多了一个LOW_MEM_AND_SWAP_UTIL，太多匿名内存被交换但是swap不是low，或者不可交换的内存太多了造成了内存压力
DIRECT_RECL_AND_THRASHING之中原厂选择不kill可感知的进程，就是不希望因为抖动而kill可感知，我厂的做法是设置了一个抖动临界值，在这个临界值附近就会考虑kill可感知进程。
并且在DIRECT_RECL_AND_THRASHING中细分了一个新的reason： LOW_FILECACHE_AFTER_THRASHING，代表在抖动后导致文件缓存变得很低，这种情况下会考虑kill后台进程

最后就是use_emergency_kill，达成这个条件后会根据当前缓存是否low，给出不同kill reason， EMERGENCY_KILL_LOWCACHE和EMERGENCY_KILL，这种情况下min_adj=0,代表前台进程都有可能被kill，通过分别记录两个不同的reason，方便我们知道是因为什么情况触发，后面加以改进。

针对这个问题我觉得可用添加一个白名单，在紧急情况判断前添加一些豁免权，就是在特定的操作，如相机等需要损失吃掉大量内存的情况，可以将用户在完成该操作后最常使用的进程给予被kill的豁免权，或者在启动这类操作前多预留一定的memory在这里可用使用回收，用来防备用户接下来会可能进行的操作。

